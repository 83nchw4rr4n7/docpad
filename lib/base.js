// Generated by CoffeeScript 1.3.1
(function() {
  var Backbone, Collection, EventSystem, Events, Model, View, balUtil, inject, _,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  Backbone = require('backbone');

  balUtil = require('bal-util');

  EventSystem = balUtil.EventSystem;

  inject = function() {
    var A, B, args, key, value, _i, _len, _ref;
    A = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      B = args[_i];
      _ref = B.prototype;
      for (key in _ref) {
        value = _ref[key];
        if (key === 'constructor') {
          continue;
        }
        A.prototype[key] = value;
      }
    }
    return A;
  };

  Events = (function() {

    Events.name = 'Events';

    function Events() {}

    Events.prototype.on = function(event, callback, context) {
      if (context != null) {
        this.bind(event, callback, context);
      } else {
        this.addListener(event, callback);
      }
      return this;
    };

    Events.prototype.off = function(event, callback, context) {
      if (context != null) {
        this.unbind(event, callback, context);
      } else if (callback != null) {
        this.unbind(event, callback);
        this.removeListener(event, callback);
      } else {
        this.unbind(event);
        this.removeAllListeners(event);
      }
      return this;
    };

    Events.prototype.trigger = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Backbone.Events.trigger.apply(this, args);
      EventSystem.prototype.emit.apply(this, args);
      return this;
    };

    Events.prototype.emit = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Backbone.Events.trigger.apply(this, args);
      EventSystem.prototype.emit.apply(this, args);
      return this;
    };

    return Events;

  })();

  Events.prototype = _.extend({}, Backbone.Events, EventSystem.prototype, Events.prototype);

  Model = (function(_super) {

    __extends(Model, _super);

    Model.name = 'Model';

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    return Model;

  })(Backbone.Model);

  inject(Model, Events);

  Collection = (function(_super) {

    __extends(Collection, _super);

    Collection.name = 'Collection';

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    return Collection;

  })(Backbone.Collection);

  inject(Collection, Events);

  View = (function(_super) {

    __extends(View, _super);

    View.name = 'View';

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    return View;

  })(Backbone.View);

  inject(View, Events);

  module.exports = {
    Events: Events,
    Model: Model,
    Collection: Collection,
    View: View
  };

}).call(this);
